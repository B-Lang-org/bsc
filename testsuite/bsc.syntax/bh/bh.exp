
# tests for BH/Classic syntax

# empty template
compile_pass Empty.bs

# tests the .get and .set of registers
compile_pass Fib.bs

# tests contexts in templates
compile_pass Context.bs

# tests the naming of nested when clauses
compile_pass NamingNestedWhens.bs

# tests the pattern binding scope inside nested when clauses
compile_pass ScopeInNestedWhens.bs

# tests whether two different types can use the same constructor names
compile_pass DuplicateConstructors.bs

# tests if rule assertions are parsed correctly
compile_pass RuleAssertions.bs

# tests if bogus rule assertions are errors
compile_fail BogusAssertions.bs
compare_file BogusAssertions.bs.bsc-out

# tests creating interfaces outside of modules
compile_pass InterfaceCognito.bs

# tests creating incognito interfaces outside of modules
compile_fail InterfaceIncognito.bs
compare_file InterfaceIncognito.bs.bsc-out

# tests an indirect import bug (#172)
compile_pass Import0.bs
compile_pass Import1.bs
compile_pass Import2.bs

# tests user defined infix operators
compile_pass Infix.bs
if { [do_internal_checks] } {
    dumpbi Infix.bo
    compare_file [make_dumpbi_output_name Infix.bo]
}

# tests precedence of · with respect to constructors
compile_pass ConstructorDot.bs

# tests := sugar for registers
compile_pass RegisterSugar.bs

# tests deep struct pattern-match in action-values
compile_pass_bug StructDeepPattern.bs 1080

# tests that identifiers can start with $
compile_pass TaskIdentifiers.bs

# need literal support for $display
compile_pass ParseDisplay.bs
compile_pass ParseDisplay.bsv

compile_pass StringLit.bs 

# Top-level defs must have signatures
# (fixes Google issue #73087150)
compile_fail_error NoSign.bs T0141

# Support Haskell's DoAndIfThenElse layout
# (fixes Google #78238284)
compile_pass DoAndIfThenElse.bs

# More flexible rules for module and action layout
# (fixes Google issue #78254411)
#
# In 2018 the parsing of 'module' and 'action' blocks was changed
# to support putting the keyword on the same line as an assignment
# and then indenting underneath (as seen in FlexibleModuleLayout.bs)
# instead of being forced to put the keyword on the next line (as in
# RestrictiveModuleLayout.bs) (or possibly having to indent further?)
#
# A result of this change is that empty 'module' and 'action' blocks
# (using indentation rather than braces) would no longer parse,
# as in EmptyAction_Layout.bs and EmptyModule_Layout.bs.
# These fail to compile because the parser interprets a later def
# as being part of the block.  The later defs have no indentation,
# though, so maybe those can be parsed as ending the block?
# For now, they fail.
#
compile_fail_error EmptyAction_Layout.bs P0005
compile_fail_error EmptyModule_Layout.bs P0005
compile_pass FlexibleModuleLayout.bs
compile_pass RestrictiveModuleLayout.bs

# In addition to the above, also test parsing of empty do-blocks
compile_fail_error EmptyDo_Layout.bs P0005

# And test the parsing of empty blocks, using braces instead of layout
#
# For action and module keywords, an empty block is allowed and the
# typechecker handles it by inserting a return statement (of Unit).
# For do blocks, regardless of whether they typecheck to Action/Module,
# the parser accepts it, but the typechecker fails to handle it and
# an internal error results (see GitHub issue #485).  The parser or
# the typechecker could handle this.
#
compile_pass EmptyAction_Braces.bs
compile_pass EmptyModule_Braces.bs
# This parses, but results in an internal error
compile_pass_bug EmptyDo_Braces.bs
# Confirm that the failure was due to an internal error
find_regexp [make_bsc_output_name EmptyDo_Braces.bs] {Internal.*Error}

# Fix position after numeric literals with prefixes
# (fixes Google issue #77395569)
compile_fail LexPos.bs
find_n_strings LexPos.bs.bsc-out {Error: "LexPos.bs", line 4, column 12: (T0020)} 1
find_n_strings LexPos.bs.bsc-out {Error: "LexPos.bs", line 7, column 16: (T0020)} 1

# Allow _ in numeric literals
# (fixes Google issue #67326190)
test_c_veri_bs_modules LiteralTest {}

# Support sized literals with Verilog-style syntax
# (fixes Google issue #67372462)
compile_pass SizedLiteral.bs
compile_fail_error SizedLiteralAmbig.bs T0033
test_c_veri_bs_modules SizedLiteralMono {}
test_c_veri_bs_modules SizedLiteralTest {}

# Warn about unused and shadowed defs
# (fixes Google issue #67757083)
compile_pass DefUnused.bs
compare_file [make_bsc_output_name DefUnused.bs]
compile_pass DefShadow.bs
compare_file [make_bsc_output_name DefShadow.bs]

# Proper treatment of data constructor arguments
# (Google issue #71027315)
compile_fail BadCase.bs
compare_file [make_bsc_output_name BadCase.bs]
compile_fail NamedStructBad.bs
compare_file [make_bsc_output_name NamedStructBad.bs]
compile_fail NiceType.bs
compare_file [make_bsc_output_name NiceType.bs]

# Tests for bug in the parsing of Real literals, when no digits follow
# the decimal point
compile_fail_error DanglingDecimal.bs P0005
compile_fail_error FieldSelectionWithDigit.bs P0005
compile_fail_error FieldSelectionFromDigit.bs T0031

# Tests for relative precedence of $ and := (see github discussion #567)
compile_fail_error DollarColonEqualsPrecedence1.bs T0080
compile_pass DollarColonEqualsPrecedence2.bs
compile_pass DollarColonEqualsPrecedence3.bs

# Tests for decoding UTF8 and erroring out on non-UTF8 files
compile_pass UTF8Code.bs
compile_pass UTF8LineComment.bs
compile_pass UTF8MultilineComment.bs
compile_fail_error Latin1Code.bs P0224
compile_fail_error Latin1LineComment.bs P0224
compile_fail_error Latin1MultilineComment.bs P0224

# Tests for UTF8 content
compile_pass UTF8Cons1.bs
compile_pass UTF8Cons2.bs
compile_pass UTF8Var1.bs
compile_pass UTF8Var2.bs
compile_pass UTF8Var3.bs
compile_pass UTF8Var4.bs
compile_fail_error UTF8BadCons1.bs P0005
compile_fail_error UTF8BadCons2.bs P0005
compile_pass 風呂敷.bs

# Tests that ° and ´ are symbol characters
compile_pass DegreePrimeSymbol.bs
compile_fail_error DegreePrimeVar1.bs P0005
compile_fail_error DegreePrimeVar2.bs P0005
compile_fail_error DegreePrimeVar3.bs P0005
compile_fail_error DegreePrimeVar4.bs P0005
