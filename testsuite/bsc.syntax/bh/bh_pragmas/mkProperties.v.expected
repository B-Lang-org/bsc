//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// _read                          O     8
// RDY__read                      O     1 const
// CLK_foo                        I     1 clock
// CLK_GATE_foo                   I     1 unused
// RST_N_bar                      I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkProperties(CLK_foo,
		    CLK_GATE_foo,
		    RST_N_bar,

		    _read,
		    RDY__read);
  parameter s = "";
  input  CLK_foo;
  input  CLK_GATE_foo;
  input  RST_N_bar;

  // value method _read
  output [7 : 0] _read;
  output RDY__read;

  // signals for module outputs
  wire [7 : 0] _read;
  wire RDY__read;

  // register addr
  reg [3 : 0] addr;
  wire [3 : 0] addr$D_IN;
  wire addr$EN;

  // ports of submodule rf
  wire [7 : 0] rf$D_IN, rf$D_OUT_1;
  wire [3 : 0] rf$ADDR_1,
	       rf$ADDR_2,
	       rf$ADDR_3,
	       rf$ADDR_4,
	       rf$ADDR_5,
	       rf$ADDR_IN;
  wire rf$WE;

  // value method _read
  assign _read = rf$D_OUT_1 ;
  assign RDY__read = 1'd1 ;

  // submodule rf
  RegFileLoad #(.file({ s, "_file.txt" }),
		.addr_width(32'd4),
		.data_width(32'd8),
		.lo(4'h0),
		.hi(4'd15),
		.binary(1'd0)) rf(.CLK(CLK_foo),
				  .ADDR_1(rf$ADDR_1),
				  .ADDR_2(rf$ADDR_2),
				  .ADDR_3(rf$ADDR_3),
				  .ADDR_4(rf$ADDR_4),
				  .ADDR_5(rf$ADDR_5),
				  .ADDR_IN(rf$ADDR_IN),
				  .D_IN(rf$D_IN),
				  .WE(rf$WE),
				  .D_OUT_1(rf$D_OUT_1),
				  .D_OUT_2(),
				  .D_OUT_3(),
				  .D_OUT_4(),
				  .D_OUT_5());

  // register addr
  assign addr$D_IN = 4'h0 ;
  assign addr$EN = 1'b0 ;

  // submodule rf
  assign rf$ADDR_1 = addr ;
  assign rf$ADDR_2 = 4'h0 ;
  assign rf$ADDR_3 = 4'h0 ;
  assign rf$ADDR_4 = 4'h0 ;
  assign rf$ADDR_5 = 4'h0 ;
  assign rf$ADDR_IN = 4'h0 ;
  assign rf$D_IN = 8'h0 ;
  assign rf$WE = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK_foo)
  begin
    if (RST_N_bar == `BSV_RESET_VALUE)
      begin
        addr <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (addr$EN) addr <= `BSV_ASSIGNMENT_DELAY addr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addr = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkProperties

