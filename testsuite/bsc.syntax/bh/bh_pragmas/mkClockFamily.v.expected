//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// ticked                         O     1
// RDY_ticked                     O     1 const
// CLK_ungated                    I     1 clock
// CLK                            I     1 clock
// CLK_GATE                       I     1
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkClockFamily(CLK_ungated,
		     CLK,
		     CLK_GATE,
		     RST_N,

		     ticked,
		     RDY_ticked);
  input  CLK_ungated;
  input  CLK;
  input  CLK_GATE;
  input  RST_N;

  // value method ticked
  output ticked;
  output RDY_ticked;

  // signals for module outputs
  wire RDY_ticked, ticked;

  // register toggle
  reg toggle;
  wire toggle$D_IN, toggle$EN;

  // register toggle_delay
  reg toggle_delay;
  wire toggle_delay$D_IN, toggle_delay$EN;

  // value method ticked
  assign ticked = toggle_delay != toggle ;
  assign RDY_ticked = 1'd1 ;

  // register toggle
  assign toggle$D_IN = !toggle ;
  assign toggle$EN = CLK_GATE ;

  // register toggle_delay
  assign toggle_delay$D_IN = toggle ;
  assign toggle_delay$EN = 1'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        toggle <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (toggle$EN) toggle <= `BSV_ASSIGNMENT_DELAY toggle$D_IN;
      end
  end

  always@(posedge CLK_ungated)
  begin
    if (toggle_delay$EN)
      toggle_delay <= `BSV_ASSIGNMENT_DELAY toggle_delay$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    toggle = 1'h0;
    toggle_delay = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkClockFamily

