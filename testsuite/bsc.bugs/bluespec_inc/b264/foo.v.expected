//
// Generated by Bluespec Compiler
//
// 
// Ports:
// Name                         I/O  size props
// RDY_one_calc                   O     1 const
// one_result                     O     1 const
// RDY_one_result                 O     1 const
// RDY_two_calc                   O     1 const
// two_result_adder1              O     1 const
// RDY_two_result_adder1          O     1 const
// two_result_adder2              O     1 const
// RDY_two_result_adder2          O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// one_calc_x                     I     1 unused
// one_calc_y                     I     1 unused
// two_calc_aa                    I     1 unused
// two_calc_ab                    I     1 unused
// two_calc_ba                    I     1 unused
// two_calc_bb                    I     1 unused
// EN_one_calc                    I     1 unused
// EN_two_calc                    I     1 unused
// 
// No combinational paths from inputs to outputs
// 
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module foo(CLK,
	   RST_N,
	   
	   one_calc_x,
	   one_calc_y,
	   EN_one_calc,
	   RDY_one_calc,
	   
	   one_result,
	   RDY_one_result,
	   
	   two_calc_aa,
	   two_calc_ab,
	   two_calc_ba,
	   two_calc_bb,
	   EN_two_calc,
	   RDY_two_calc,
	   
	   two_result_adder1,
	   RDY_two_result_adder1,
	   
	   two_result_adder2,
	   RDY_two_result_adder2);
  input  CLK;
  input  RST_N;
  
  // action method one_calc
  input  one_calc_x;
  input  one_calc_y;
  input  EN_one_calc;
  output RDY_one_calc;
  
  // value method one_result
  output one_result;
  output RDY_one_result;
  
  // action method two_calc
  input  two_calc_aa;
  input  two_calc_ab;
  input  two_calc_ba;
  input  two_calc_bb;
  input  EN_two_calc;
  output RDY_two_calc;
  
  // value method two_result_adder1
  output two_result_adder1;
  output RDY_two_result_adder1;
  
  // value method two_result_adder2
  output two_result_adder2;
  output RDY_two_result_adder2;

  // signals for module outputs
  wire RDY_one_calc,
       RDY_one_result,
       RDY_two_calc,
       RDY_two_result_adder1,
       RDY_two_result_adder2,
       one_result,
       two_result_adder1,
       two_result_adder2;

  // action method one_calc
  assign RDY_one_calc = 1'd1 ;

  // value method one_result
  assign one_result = 1'h0 ;
  assign RDY_one_result = 1'd1 ;

  // action method two_calc
  assign RDY_two_calc = 1'd1 ;

  // value method two_result_adder1
  assign two_result_adder1 = 1'h0 ;
  assign RDY_two_result_adder1 = 1'd1 ;

  // value method two_result_adder2
  assign two_result_adder2 = 1'h0 ;
  assign RDY_two_result_adder2 = 1'd1 ;
endmodule  // foo

